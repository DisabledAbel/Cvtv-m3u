name: Update Missouri IPTV Playlist

on:
  schedule:
    - cron: "0 */12 * * *" # every 12 hours
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install node-fetch@3

      - name: Build playlist from GitHub issue
        run: |
          node <<'EOF'
          import fs from "fs";
          import fetch from "node-fetch";

          const issueUrl = "https://api.github.com/repos/DisabledAbel/Cvtv-m3u/issues/1";
          const res = await fetch(issueUrl, { headers: { "Accept": "application/vnd.github.v3+json" } });
          const data = await res.json();
          const body = data.body || "";

          const lines = body.split("\n");
          const channels = [];
          let lastName = "";

          for (let line of lines) {
            line = line.trim();
            if (!line) continue;
            if (line.startsWith("http")) {
              channels.push({ name: lastName || "Unknown", url: line });
            } else if (!line.startsWith("#")) {
              lastName = line;
            }
          }

          let output = "#EXTM3U\n\n";
          for (const ch of channels) {
            output += `#EXTINF:-1 group-title="Missouri",${ch.name}\n${ch.url}\n\n`;
          }

          fs.mkdirSync("playlists", { recursive: true });
          fs.writeFileSync("playlists/missouri.m3u8", output);
          console.log("âœ… Playlist built successfully!");
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add playlists/missouri.m3u8

          if ! git diff --cached --quiet; then
            git commit -m "Auto-update Missouri IPTV playlist [skip ci]"
            # Retry push up to 3 times if remote has new commits
            for i in {1..3}; do
              git push origin main && break
              echo "Push rejected, pulling remote and retrying..."
              git pull --rebase origin main
            done
          else
            echo "No changes detected, skipping commit."
